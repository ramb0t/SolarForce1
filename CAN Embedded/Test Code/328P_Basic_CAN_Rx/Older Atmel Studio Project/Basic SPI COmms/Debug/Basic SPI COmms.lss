
Basic SPI COmms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000003b0  00000424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000068  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000009a1  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000275  00000000  00000000  00000e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002fa  00000000  00000000  000010d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000134  00000000  00000000  000013cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000025a  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000739  00000000  00000000  0000175a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  00001e93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 61 01 	call	0x2c2	; 0x2c2 <main>
  78:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <spi_init>:
		uint8_t data [8];
	} CanMessage;

void spi_init (void) //init SPI interface
{
	DDR_SPI |= (1<<P_SCK)|(1<<P_MOSI);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	88 62       	ori	r24, 0x28	; 40
  84:	84 b9       	out	0x04, r24	; 4
	PORT_SPI&=~((1<<P_SCK)|(1<<P_MOSI)|(1<<P_MISO));
  86:	85 b1       	in	r24, 0x05	; 5
  88:	87 7c       	andi	r24, 0xC7	; 199
  8a:	85 b9       	out	0x05, r24	; 5
	DDR_CS|=(1<<P_CS);
  8c:	22 9a       	sbi	0x04, 2	; 4
	PORT_CS|=(1<<P_CS);  //SPI Master, fosc = fclk/2
  8e:	2a 9a       	sbi	0x05, 2	; 5
	SPCR=(1<<SPE)|(1<<MSTR);
  90:	80 e5       	ldi	r24, 0x50	; 80
  92:	8c bd       	out	0x2c, r24	; 44
	SPSR=(1<<SPI2X);
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	8d bd       	out	0x2d, r24	; 45
  98:	08 95       	ret

0000009a <spi_putc>:
}

uint8_t spi_putc(uint8_t data)
{
	SPDR = data; 
  9a:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
  9c:	0d b4       	in	r0, 0x2d	; 45
  9e:	07 fe       	sbrs	r0, 7
  a0:	fd cf       	rjmp	.-6      	; 0x9c <spi_putc+0x2>
	return SPDR;
  a2:	8e b5       	in	r24, 0x2e	; 46
}
  a4:	08 95       	ret

000000a6 <mcp2515_write_reg>:

void mcp2515_write_reg(uint8_t address, uint8_t data )
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	d8 2f       	mov	r29, r24
  ac:	c6 2f       	mov	r28, r22
	//CS of the MP2515 to pull low
	PORT_CS &= ~(1<<P_CS);
  ae:	2a 98       	cbi	0x05, 2	; 5
	
	spi_putc(SPI_WRITE);
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	0e 94 4d 00 	call	0x9a	; 0x9a <spi_putc>
	spi_putc(address);
  b6:	8d 2f       	mov	r24, r29
  b8:	0e 94 4d 00 	call	0x9a	; 0x9a <spi_putc>
	spi_putc(data);
  bc:	8c 2f       	mov	r24, r28
  be:	0e 94 4d 00 	call	0x9a	; 0x9a <spi_putc>
	
	//Unlock CS Line
	PORT_CS |= (1<<P_CS);
  c2:	2a 9a       	sbi	0x05, 2	; 5
}
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <mcp2515_bit_modify>:

	return data;
}

void mcp2515_bit_modify (uint8_t adress, uint8_t mask, uint8_t data)
{
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	18 2f       	mov	r17, r24
  d2:	d6 2f       	mov	r29, r22
  d4:	c4 2f       	mov	r28, r20
	// Draw / CS of the MCP2515 to Low
	PORT_CS &= ~ (1 << P_CS);
  d6:	2a 98       	cbi	0x05, 2	; 5

	spi_putc (SPI_BIT_MODIFY);
  d8:	85 e0       	ldi	r24, 0x05	; 5
  da:	0e 94 4d 00 	call	0x9a	; 0x9a <spi_putc>
	spi_putc (adress);
  de:	81 2f       	mov	r24, r17
  e0:	0e 94 4d 00 	call	0x9a	; 0x9a <spi_putc>
	spi_putc (mask);
  e4:	8d 2f       	mov	r24, r29
  e6:	0e 94 4d 00 	call	0x9a	; 0x9a <spi_putc>
	spi_putc (data);
  ea:	8c 2f       	mov	r24, r28
  ec:	0e 94 4d 00 	call	0x9a	; 0x9a <spi_putc>

	//Unlock / CS line
	PORT_CS |= (1 << P_CS);
  f0:	2a 9a       	sbi	0x05, 2	; 5
}
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	1f 91       	pop	r17
  f8:	08 95       	ret

000000fa <mcp2515_read_rx_status>:
	spi_putc (SPI_RTS | 0x01);
	PORT_CS |= (1 << P_CS);
}

uint8_t mcp2515_read_rx_status (void)
{
  fa:	cf 93       	push	r28
	uint8_t data;

	// Draw / CS of the MCP2515 to Low
	PORT_CS &=~ (1 << P_CS);
  fc:	2a 98       	cbi	0x05, 2	; 5

	spi_putc (SPI_RX_STATUS);
  fe:	80 eb       	ldi	r24, 0xB0	; 176
 100:	0e 94 4d 00 	call	0x9a	; 0x9a <spi_putc>
	data = spi_putc (0xff);
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	0e 94 4d 00 	call	0x9a	; 0x9a <spi_putc>
 10a:	c8 2f       	mov	r28, r24

	// The data is sent again repeated,
	// You needed only one of the two bytes evaluate.
	spi_putc (0xff);
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	0e 94 4d 00 	call	0x9a	; 0x9a <spi_putc>

	//Unlock / CS line
	PORT_CS |= (1 << P_CS);
 112:	2a 9a       	sbi	0x05, 2	; 5

	return data;
}
 114:	8c 2f       	mov	r24, r28
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <can_get_message>:


uint8_t can_get_message (CanMessage *p_message)
{
 11a:	cf 92       	push	r12
 11c:	df 92       	push	r13
 11e:	ef 92       	push	r14
 120:	ff 92       	push	r15
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	1f 92       	push	r1
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
 130:	6c 01       	movw	r12, r24
	// Read status
	uint8_t status = mcp2515_read_rx_status ();
 132:	0e 94 7d 00 	call	0xfa	; 0xfa <mcp2515_read_rx_status>
 136:	89 83       	std	Y+1, r24	; 0x01
	PORTB &=~(1<<PORTB1);
 138:	29 98       	cbi	0x05, 1	; 5

	if (bit_is_set (status, 6))
 13a:	89 81       	ldd	r24, Y+1	; 0x01
 13c:	86 ff       	sbrs	r24, 6
 13e:	05 c0       	rjmp	.+10     	; 0x14a <can_get_message+0x30>
	{
		// Message in buffer 0

		PORT_CS &=~ (1 << P_CS); // CS Low
 140:	2a 98       	cbi	0x05, 2	; 5
		spi_putc (SPI_READ_RX);
 142:	80 e9       	ldi	r24, 0x90	; 144
 144:	0e 94 4d 00 	call	0x9a	; 0x9a <spi_putc>
 148:	08 c0       	rjmp	.+16     	; 0x15a <can_get_message+0x40>
	}
	else if (bit_is_set (status,7))
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	88 23       	and	r24, r24
 14e:	0c f0       	brlt	.+2      	; 0x152 <can_get_message+0x38>
 150:	54 c0       	rjmp	.+168    	; 0x1fa <can_get_message+0xe0>
	{
		// Message in buffer 1

		PORT_CS &=~ (1 << P_CS); // CS Low
 152:	2a 98       	cbi	0x05, 2	; 5
		spi_putc (SPI_READ_RX | 0x04);
 154:	84 e9       	ldi	r24, 0x94	; 148
 156:	0e 94 4d 00 	call	0x9a	; 0x9a <spi_putc>
		/* Error: No new message is present */
		return 0xff;
	}

	// Read the standard ID
	p_message-> id = (uint16_t) spi_putc (0xff) << 3;
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	0e 94 4d 00 	call	0x9a	; 0x9a <spi_putc>
 160:	98 e0       	ldi	r25, 0x08	; 8
 162:	89 9f       	mul	r24, r25
 164:	80 01       	movw	r16, r0
 166:	11 24       	eor	r1, r1
 168:	f6 01       	movw	r30, r12
 16a:	11 83       	std	Z+1, r17	; 0x01
 16c:	00 83       	st	Z, r16
	p_message-> id |= (uint16_t) spi_putc (0xff) >> 5;
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	0e 94 4d 00 	call	0x9a	; 0x9a <spi_putc>
 174:	82 95       	swap	r24
 176:	86 95       	lsr	r24
 178:	87 70       	andi	r24, 0x07	; 7
 17a:	08 2b       	or	r16, r24
 17c:	f6 01       	movw	r30, r12
 17e:	11 83       	std	Z+1, r17	; 0x01
 180:	00 83       	st	Z, r16

	spi_putc (0xff);
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	0e 94 4d 00 	call	0x9a	; 0x9a <spi_putc>
	spi_putc (0xff);
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	0e 94 4d 00 	call	0x9a	; 0x9a <spi_putc>

	// Read length
	uint8_t length = spi_putc (0xff) & 0x0f;
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	0e 94 4d 00 	call	0x9a	; 0x9a <spi_putc>
 194:	8f 70       	andi	r24, 0x0F	; 15
	p_message-> length = length;
 196:	f6 01       	movw	r30, r12
 198:	83 83       	std	Z+3, r24	; 0x03

	// Read the data
	for (uint8_t i = 0; i <length; i ++) {
 19a:	88 23       	and	r24, r24
 19c:	99 f0       	breq	.+38     	; 0x1c4 <can_get_message+0xaa>
 19e:	86 01       	movw	r16, r12
 1a0:	0c 5f       	subi	r16, 0xFC	; 252
 1a2:	1f 4f       	sbci	r17, 0xFF	; 255
 1a4:	81 50       	subi	r24, 0x01	; 1
 1a6:	76 01       	movw	r14, r12
 1a8:	f5 e0       	ldi	r31, 0x05	; 5
 1aa:	ef 0e       	add	r14, r31
 1ac:	f1 1c       	adc	r15, r1
 1ae:	e8 0e       	add	r14, r24
 1b0:	f1 1c       	adc	r15, r1
		p_message-> data [i] = spi_putc (0xff);
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	0e 94 4d 00 	call	0x9a	; 0x9a <spi_putc>
 1b8:	f8 01       	movw	r30, r16
 1ba:	81 93       	st	Z+, r24
 1bc:	8f 01       	movw	r16, r30
	// Read length
	uint8_t length = spi_putc (0xff) & 0x0f;
	p_message-> length = length;

	// Read the data
	for (uint8_t i = 0; i <length; i ++) {
 1be:	ee 15       	cp	r30, r14
 1c0:	ff 05       	cpc	r31, r15
 1c2:	b9 f7       	brne	.-18     	; 0x1b2 <can_get_message+0x98>
		p_message-> data [i] = spi_putc (0xff);
	}

	PORT_CS |= (1 << P_CS);
 1c4:	2a 9a       	sbi	0x05, 2	; 5

	if (bit_is_set (status, 3)) {
 1c6:	89 81       	ldd	r24, Y+1	; 0x01
 1c8:	83 ff       	sbrs	r24, 3
 1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <can_get_message+0xba>
		p_message-> rtr = 1;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	f6 01       	movw	r30, r12
 1d0:	82 83       	std	Z+2, r24	; 0x02
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <can_get_message+0xbe>
		} else {
		p_message-> rtr = 0;
 1d4:	f6 01       	movw	r30, r12
 1d6:	12 82       	std	Z+2, r1	; 0x02
	}

	//delete Interrupt Flag
	if (bit_is_set (status, 6)) {
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	86 ff       	sbrs	r24, 6
 1dc:	06 c0       	rjmp	.+12     	; 0x1ea <can_get_message+0xd0>
		mcp2515_bit_modify (CANINTF, (1 << RX0IF), 0);
 1de:	40 e0       	ldi	r20, 0x00	; 0
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	8c e2       	ldi	r24, 0x2C	; 44
 1e4:	0e 94 65 00 	call	0xca	; 0xca <mcp2515_bit_modify>
 1e8:	05 c0       	rjmp	.+10     	; 0x1f4 <can_get_message+0xda>
		} else {
		mcp2515_bit_modify (CANINTF, (1 << RX1IF), 0);
 1ea:	40 e0       	ldi	r20, 0x00	; 0
 1ec:	62 e0       	ldi	r22, 0x02	; 2
 1ee:	8c e2       	ldi	r24, 0x2C	; 44
 1f0:	0e 94 65 00 	call	0xca	; 0xca <mcp2515_bit_modify>
	}

	return (status & 0x07);
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	87 70       	andi	r24, 0x07	; 7
 1f8:	01 c0       	rjmp	.+2      	; 0x1fc <can_get_message+0xe2>
		PORT_CS &=~ (1 << P_CS); // CS Low
		spi_putc (SPI_READ_RX | 0x04);
	}
	else {
		/* Error: No new message is present */
		return 0xff;
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
		} else {
		mcp2515_bit_modify (CANINTF, (1 << RX1IF), 0);
	}

	return (status & 0x07);
}
 1fc:	0f 90       	pop	r0
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	ff 90       	pop	r15
 208:	ef 90       	pop	r14
 20a:	df 90       	pop	r13
 20c:	cf 90       	pop	r12
 20e:	08 95       	ret

00000210 <mcp2515_init>:

void mcp2515_init ( void )
{
	// SPI Interface initialisieren
	spi_init ( ) ;
 210:	0e 94 40 00 	call	0x80	; 0x80 <spi_init>

	// MCP2515 per Software Reset zuruecksetzten,
	// danach ist der MCP2515 im Configuration Mode
	PORT_CS &= ~ ( 1 <<P_CS ) ;
 214:	2a 98       	cbi	0x05, 2	; 5
	spi_putc ( SPI_RESET ) ;
 216:	80 ec       	ldi	r24, 0xC0	; 192
 218:	0e 94 4d 00 	call	0x9a	; 0x9a <spi_putc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21c:	8f e9       	ldi	r24, 0x9F	; 159
 21e:	9f e0       	ldi	r25, 0x0F	; 15
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <mcp2515_init+0x10>
 224:	00 c0       	rjmp	.+0      	; 0x226 <mcp2515_init+0x16>
 226:	00 00       	nop
	_delay_ms ( 1 ) ;
	PORT_CS |= ( 1 <<P_CS ) ;
 228:	2a 9a       	sbi	0x05, 2	; 5
 22a:	8f e3       	ldi	r24, 0x3F	; 63
 22c:	9c e9       	ldi	r25, 0x9C	; 156
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <mcp2515_init+0x1e>
 232:	00 c0       	rjmp	.+0      	; 0x234 <mcp2515_init+0x24>
 234:	00 00       	nop
	* Bus speed = 1 / (Total # of TQ) * TQ
	* = 1 / 8 * TQ = 125 kHz
	*/

	// BRP = 7
	mcp2515_write_reg ( CNF1, ( 1 <<BRP0 ) | ( 1 <<BRP1 ) | ( 1 <<BRP2 ) ) ;
 236:	67 e0       	ldi	r22, 0x07	; 7
 238:	8a e2       	ldi	r24, 0x2A	; 42
 23a:	0e 94 53 00 	call	0xa6	; 0xa6 <mcp2515_write_reg>

	// Prop Seg und Phase Seg1 einstellen
	mcp2515_write_reg ( CNF2, ( 1 <<BTLMODE ) | ( 1 <<PHSEG11 ) ) ;
 23e:	60 e9       	ldi	r22, 0x90	; 144
 240:	89 e2       	ldi	r24, 0x29	; 41
 242:	0e 94 53 00 	call	0xa6	; 0xa6 <mcp2515_write_reg>

	// Wake-up Filter deaktivieren, Phase Seg2 einstellen
	mcp2515_write_reg ( CNF3, ( 1 <<PHSEG21 ) ) ;
 246:	62 e0       	ldi	r22, 0x02	; 2
 248:	88 e2       	ldi	r24, 0x28	; 40
 24a:	0e 94 53 00 	call	0xa6	; 0xa6 <mcp2515_write_reg>

	// Aktivieren der Rx Buffer Interrupts
	mcp2515_write_reg ( CANINTE, ( 1 <<RX1IE ) | ( 1 <<RX0IE ) ) ;
 24e:	63 e0       	ldi	r22, 0x03	; 3
 250:	8b e2       	ldi	r24, 0x2B	; 43
 252:	0e 94 53 00 	call	0xa6	; 0xa6 <mcp2515_write_reg>
	/*
	* Einstellen der Filter
	*/

	// Buffer 0 : Empfangen aller Nachrichten
	mcp2515_write_reg ( RXB0CTRL, ( 1 <<RXM1 ) | ( 1 <<RXM0 ) ) ;
 256:	60 e6       	ldi	r22, 0x60	; 96
 258:	80 e6       	ldi	r24, 0x60	; 96
 25a:	0e 94 53 00 	call	0xa6	; 0xa6 <mcp2515_write_reg>

	// Buffer 1 : Empfangen aller Nachrichten
	mcp2515_write_reg ( RXB1CTRL, ( 1 <<RXM1 ) | ( 1 <<RXM0 ) ) ;
 25e:	60 e6       	ldi	r22, 0x60	; 96
 260:	80 e7       	ldi	r24, 0x70	; 112
 262:	0e 94 53 00 	call	0xa6	; 0xa6 <mcp2515_write_reg>

	// Alle Bits der Empfangsmaske loeschen,
	// damit werden alle Nachrichten empfangen
	mcp2515_write_reg ( RXM0SIDH, 0 ) ;
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	80 e2       	ldi	r24, 0x20	; 32
 26a:	0e 94 53 00 	call	0xa6	; 0xa6 <mcp2515_write_reg>
	mcp2515_write_reg ( RXM0SIDL, 0 ) ;
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	81 e2       	ldi	r24, 0x21	; 33
 272:	0e 94 53 00 	call	0xa6	; 0xa6 <mcp2515_write_reg>
	mcp2515_write_reg ( RXM0EID8, 0 ) ;
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	82 e2       	ldi	r24, 0x22	; 34
 27a:	0e 94 53 00 	call	0xa6	; 0xa6 <mcp2515_write_reg>
	mcp2515_write_reg ( RXM0EID0, 0 ) ;
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	83 e2       	ldi	r24, 0x23	; 35
 282:	0e 94 53 00 	call	0xa6	; 0xa6 <mcp2515_write_reg>

	mcp2515_write_reg ( RXM1SIDH, 0 ) ;
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	84 e2       	ldi	r24, 0x24	; 36
 28a:	0e 94 53 00 	call	0xa6	; 0xa6 <mcp2515_write_reg>
	mcp2515_write_reg ( RXM1SIDL, 0 ) ;
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	85 e2       	ldi	r24, 0x25	; 37
 292:	0e 94 53 00 	call	0xa6	; 0xa6 <mcp2515_write_reg>
	mcp2515_write_reg ( RXM1EID8, 0 ) ;
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	86 e2       	ldi	r24, 0x26	; 38
 29a:	0e 94 53 00 	call	0xa6	; 0xa6 <mcp2515_write_reg>
	mcp2515_write_reg ( RXM1EID0, 0 ) ;
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	87 e2       	ldi	r24, 0x27	; 39
 2a2:	0e 94 53 00 	call	0xa6	; 0xa6 <mcp2515_write_reg>
	/*
	* Einstellen der Pin Funktionen
	*/

	// Deaktivieren der Pins RXnBF Pins (High Impedance State)
	mcp2515_write_reg ( BFPCTRL, 0 ) ;
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	8c e0       	ldi	r24, 0x0C	; 12
 2aa:	0e 94 53 00 	call	0xa6	; 0xa6 <mcp2515_write_reg>

	// TXnRTS Bits als Inputs schalten
	mcp2515_write_reg ( TXRTSCTRL, 0 ) ;
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	8d e0       	ldi	r24, 0x0D	; 13
 2b2:	0e 94 53 00 	call	0xa6	; 0xa6 <mcp2515_write_reg>

	// Device zurueck in den normalen Modus versetzten
	mcp2515_bit_modify ( CANCTRL, 0xE0, 0 ) ;
 2b6:	40 e0       	ldi	r20, 0x00	; 0
 2b8:	60 ee       	ldi	r22, 0xE0	; 224
 2ba:	8f e0       	ldi	r24, 0x0F	; 15
 2bc:	0e 94 65 00 	call	0xca	; 0xca <mcp2515_bit_modify>
 2c0:	08 95       	ret

000002c2 <main>:
}


int main(void)
{
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
 2ca:	2c 97       	sbiw	r28, 0x0c	; 12
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	de bf       	out	0x3e, r29	; 62
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	cd bf       	out	0x3d, r28	; 61
	DDRB |=(1<<PORTB1);
 2d6:	21 9a       	sbi	0x04, 1	; 4
	spi_init();
 2d8:	0e 94 40 00 	call	0x80	; 0x80 <spi_init>
	mcp2515_init();
 2dc:	0e 94 08 01 	call	0x210	; 0x210 <mcp2515_init>
	CanMessage message;
	uint8_t rx_status = 0x00;
	
while(1)
	{	
		for(int a = 0; a<1; a++)
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	00 e0       	ldi	r16, 0x00	; 0
 2e6:	10 e0       	ldi	r17, 0x00	; 0
		rx_status = can_get_message (&message); //gets msg from bus (pointer to the object of CanMessage type) [returns value based on result of Rx

	} while(rx_status == 0xff);


	if (message.data[0] == 0x04 && message.data[1]==0xf3)
 2e8:	0f 2e       	mov	r0, r31
 2ea:	f4 e1       	ldi	r31, 0x14	; 20
 2ec:	ef 2e       	mov	r14, r31
 2ee:	f0 2d       	mov	r31, r0
 2f0:	f1 2c       	mov	r15, r1
 2f2:	18 c0       	rjmp	.+48     	; 0x324 <main+0x62>
	
while(1)
	{	
		for(int a = 0; a<1; a++)
		{
			PORTB |= (1<<PORTB1);
 2f4:	29 9a       	sbi	0x05, 1	; 5
 2f6:	2f ef       	ldi	r18, 0xFF	; 255
 2f8:	30 e7       	ldi	r19, 0x70	; 112
 2fa:	42 e0       	ldi	r20, 0x02	; 2
 2fc:	21 50       	subi	r18, 0x01	; 1
 2fe:	30 40       	sbci	r19, 0x00	; 0
 300:	40 40       	sbci	r20, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <main+0x3a>
 304:	00 c0       	rjmp	.+0      	; 0x306 <main+0x44>
 306:	00 00       	nop
			_delay_ms(50);
			PORTB &=~(1<<PORTB1);
 308:	29 98       	cbi	0x05, 1	; 5
 30a:	2f ef       	ldi	r18, 0xFF	; 255
 30c:	30 e7       	ldi	r19, 0x70	; 112
 30e:	42 e0       	ldi	r20, 0x02	; 2
 310:	21 50       	subi	r18, 0x01	; 1
 312:	30 40       	sbci	r19, 0x00	; 0
 314:	40 40       	sbci	r20, 0x00	; 0
 316:	e1 f7       	brne	.-8      	; 0x310 <main+0x4e>
 318:	00 c0       	rjmp	.+0      	; 0x31a <main+0x58>
 31a:	00 00       	nop
	CanMessage message;
	uint8_t rx_status = 0x00;
	
while(1)
	{	
		for(int a = 0; a<1; a++)
 31c:	01 96       	adiw	r24, 0x01	; 1
 31e:	02 c0       	rjmp	.+4      	; 0x324 <main+0x62>
 320:	80 2f       	mov	r24, r16
 322:	91 2f       	mov	r25, r17
 324:	18 16       	cp	r1, r24
 326:	19 06       	cpc	r1, r25
 328:	2c f7       	brge	.-54     	; 0x2f4 <main+0x32>
			PORTB &=~(1<<PORTB1);
			_delay_ms(50);
		}


	DDRB |=(1<<PORTB1);
 32a:	21 9a       	sbi	0x04, 1	; 4
	do {
		//_delay_ms(1000);	
	
		PORTB |= (1<<PORTB1);
 32c:	29 9a       	sbi	0x05, 1	; 5
 32e:	8f ef       	ldi	r24, 0xFF	; 255
 330:	91 ee       	ldi	r25, 0xE1	; 225
 332:	24 e0       	ldi	r18, 0x04	; 4
 334:	81 50       	subi	r24, 0x01	; 1
 336:	90 40       	sbci	r25, 0x00	; 0
 338:	20 40       	sbci	r18, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <main+0x72>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <main+0x7c>
 33e:	00 00       	nop
		_delay_ms(100);
		PORTB &=~(1<<PORTB1);
 340:	29 98       	cbi	0x05, 1	; 5
 342:	3f ef       	ldi	r19, 0xFF	; 255
 344:	40 e7       	ldi	r20, 0x70	; 112
 346:	82 e0       	ldi	r24, 0x02	; 2
 348:	31 50       	subi	r19, 0x01	; 1
 34a:	40 40       	sbci	r20, 0x00	; 0
 34c:	80 40       	sbci	r24, 0x00	; 0
 34e:	e1 f7       	brne	.-8      	; 0x348 <main+0x86>
 350:	00 c0       	rjmp	.+0      	; 0x352 <main+0x90>
 352:	00 00       	nop
		_delay_ms(50);
		PORTB |= (1<<PORTB1);
 354:	29 9a       	sbi	0x05, 1	; 5
	
		rx_status = can_get_message (&message); //gets msg from bus (pointer to the object of CanMessage type) [returns value based on result of Rx
 356:	ce 01       	movw	r24, r28
 358:	01 96       	adiw	r24, 0x01	; 1
 35a:	0e 94 8d 00 	call	0x11a	; 0x11a <can_get_message>

	} while(rx_status == 0xff);
 35e:	8f 3f       	cpi	r24, 0xFF	; 255
 360:	29 f3       	breq	.-54     	; 0x32c <main+0x6a>


	if (message.data[0] == 0x04 && message.data[1]==0xf3)
 362:	8d 81       	ldd	r24, Y+5	; 0x05
 364:	84 30       	cpi	r24, 0x04	; 4
 366:	f1 f4       	brne	.+60     	; 0x3a4 <main+0xe2>
 368:	8e 81       	ldd	r24, Y+6	; 0x06
 36a:	83 3f       	cpi	r24, 0xF3	; 243
 36c:	d9 f4       	brne	.+54     	; 0x3a4 <main+0xe2>
 36e:	8e 2d       	mov	r24, r14
 370:	9f 2d       	mov	r25, r15
		{
			for(int a = 0; a<20; a++)
			{
				DDRB |=(1<<PORTB1);
 372:	21 9a       	sbi	0x04, 1	; 4
				PORTB |= (1<<PORTB1);
 374:	29 9a       	sbi	0x05, 1	; 5
 376:	2f ef       	ldi	r18, 0xFF	; 255
 378:	33 ec       	ldi	r19, 0xC3	; 195
 37a:	49 e0       	ldi	r20, 0x09	; 9
 37c:	21 50       	subi	r18, 0x01	; 1
 37e:	30 40       	sbci	r19, 0x00	; 0
 380:	40 40       	sbci	r20, 0x00	; 0
 382:	e1 f7       	brne	.-8      	; 0x37c <main+0xba>
 384:	00 c0       	rjmp	.+0      	; 0x386 <main+0xc4>
 386:	00 00       	nop
				_delay_ms(200);
				PORTB &=~(1<<PORTB1);
 388:	29 98       	cbi	0x05, 1	; 5
 38a:	2f ef       	ldi	r18, 0xFF	; 255
 38c:	33 ec       	ldi	r19, 0xC3	; 195
 38e:	49 e0       	ldi	r20, 0x09	; 9
 390:	21 50       	subi	r18, 0x01	; 1
 392:	30 40       	sbci	r19, 0x00	; 0
 394:	40 40       	sbci	r20, 0x00	; 0
 396:	e1 f7       	brne	.-8      	; 0x390 <main+0xce>
 398:	00 c0       	rjmp	.+0      	; 0x39a <main+0xd8>
 39a:	00 00       	nop
 39c:	01 97       	sbiw	r24, 0x01	; 1
	} while(rx_status == 0xff);


	if (message.data[0] == 0x04 && message.data[1]==0xf3)
		{
			for(int a = 0; a<20; a++)
 39e:	00 97       	sbiw	r24, 0x00	; 0
 3a0:	41 f7       	brne	.-48     	; 0x372 <main+0xb0>
 3a2:	be cf       	rjmp	.-132    	; 0x320 <main+0x5e>
				_delay_ms(200);
				PORTB &=~(1<<PORTB1);
				_delay_ms(200);
			}
		}
else PORTB |= (1<<PORTB1);
 3a4:	29 9a       	sbi	0x05, 1	; 5
	CanMessage message;
	uint8_t rx_status = 0x00;
	
while(1)
	{	
		for(int a = 0; a<1; a++)
 3a6:	80 2f       	mov	r24, r16
 3a8:	91 2f       	mov	r25, r17
 3aa:	bc cf       	rjmp	.-136    	; 0x324 <main+0x62>

000003ac <_exit>:
 3ac:	f8 94       	cli

000003ae <__stop_program>:
 3ae:	ff cf       	rjmp	.-2      	; 0x3ae <__stop_program>
